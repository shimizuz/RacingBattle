//==============================================================================
//
// フィールド
// Author : Shimizu Shoji
//
//==============================================================================
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// include
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "CField.h"

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// const
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
namespace {
const int kNumBlocks = 25;
}

//==============================================================================
// class implementation
//==============================================================================
//------------------------------------------------
// ctor
//------------------------------------------------
CField::CField() {
  p_possible_intrusion_map_ = new unsigned int[kNumBlocks*kNumBlocks];
  for (unsigned int w = 0; w < kNumBlocks; ++w) {
    for (unsigned int h = 0; h < kNumBlocks; ++h) {
      const unsigned int index = (w * kNumBlocks) + h;
      // TODO (Shimizu Shoji) ここの数値をしっかりと設定すること
      p_possible_intrusion_map_[index] = 0x0f;
    }
  }
}

//------------------------------------------------
// dtor
//------------------------------------------------
CField::~CField() {
  if (p_possible_intrusion_map_) {
    delete[] p_possible_intrusion_map_;
    p_possible_intrusion_map_ = nullptr;
  }
}

//------------------------------------------------
// 更新処理を行う。
//------------------------------------------------
void CField::Update(void) {
}

//------------------------------------------------
// 描画処理を行う。
//------------------------------------------------
void CField::Draw(void) {
}

//------------------------------------------------
// フィールドの侵入判定を取得する。
// 侵入可能なら真, 侵入不可能なら負
//------------------------------------------------
bool CField::CanIntrude(unsigned int w, unsigned int h, Direction direction) const {
  const unsigned int index = (w * kNumBlocks) + h;
  return (p_possible_intrusion_map_[index] & direction) == 1;
}
